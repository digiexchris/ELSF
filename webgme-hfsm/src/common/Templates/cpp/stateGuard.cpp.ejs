# Import user libraries here (if any)
<%
if (model.Library_list) {
  model.Library_list.map(function(library) {
-%>
import "<%- library.name %>.bgs"
<%
  });
}
-%>

const state_timer_handle = 0

dim changeState
<%
for (var i=0; i<model.numHeirarchyLevels; i++) {
-%>
dim stateLevel_<%- i %>
<%
}
-%>

<%
states.map(function(state) {
-%>
const <%- state.stateName %> = <%- state.stateID %>
<%
});
-%>

# The system_boot handler deals with all initialization needed.
event system_boot(major, minor, patch, build, ll_version, protocol_version, hw)
  # user initialization code:
  #
  # START USER CODE
  #
<%- model.initialization %>
  #
  # END USER CODE
  #
  # generated initialization code for the state machine:
  changeState = 0
  # STATE::<%- model.initState.name %>
<%- model.initStateCode %>
  # execute the init transition for the chart
<%- model.initFunc %>  
  # Start the state timer
  call hardware_set_soft_timer(<%- parseInt(parseFloat(model.initState.timerPeriod) * 32768.0) %>, state_timer_handle, 0)
end

# The timer handles all the state function code and state transition
#  code
event hardware_soft_timer(handle)
  changeState = 0
  # Generated code to execute state transitions and state functions:
<%
if (model.State_list) {
  model.State_list.map(function(state) {
-%>
<%- state.timerFunc %>
<%
  });
}
-%>
end
<%
if (model.Event_list) {
  model.Event_list.map(function(event) {
-%>

<%- event.function %>
<%
  });
}
-%>
